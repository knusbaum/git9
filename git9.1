.TH GIT9 1
.SH NAME
git9, git9/conf, git9/query, git9/walk, git9/clone, git9/branch,
git9/commit, git9/diff, git9/init, git9/log, git9/merge, git9/push, git9/pull
\- Manage git repositories.

.SH SYNOPSIS
.PP
.B git9/add
[
.B -r
]
.I path...
.PP
.B git9/branch
[
.B -b
.I base
]
.I newbranch
.PP
.B git9/clone
[
.I remote
[
.I local
]
]
.PP
.B git9/commit
.I file...
.PP
.B git9/conf
[
.B -r
]
[
.B -f
.I file
]
.I keys...
.PP
.B git9/diff
[
.B -b
.I branch
]
[
.B -s
]
[
.I file...
]
.PP
.B git9/revert
[
.B -c
.I commit
]
.I file...
.PP
.B git9/export
[
.I commits...
]
.PP
.B git9/import
[
.I commits...
]
.PP
.B git9/init
[
.B -b
]
[
.I dir
]
[
.B -u
.I upstream
]
.PP
.B git9/log
[
.B -b
.I branch
]
[
.I files...
]
.PP
.B git9/merge
.I theirs
.PP
.B git9/pull
[
.B -f
]
[
.B -u
.I upstream
]
.PP
.B git9/push
[
.B -a
]
[
.B -u
.I upstream
]
[
.B -b
.I branch
]
[
.B -r
.I branch
]
.PP
.B git9/query
[
.B -pc
]
.I query
.PP
.B git9/walk
[
.B -qc
]
[
.B -b
.I branch
]
[
.B -f
.I filters
]
[
.I [files...]
]

.SH DESCRIPTION
.PP
Git is a distributed version control system.
This means that each repository contains a full copy of the history.
This history is then synced between computers as needed.

.PP
These programs provide tools to manage and interoperate with
repositories hosted in git.

.SH CONCEPTS

Git stores snapshots of the working directory.
Files can either be in a tracked or untracked state.
Each commit takes the current version of all tracked files and
adds them to a new commit.

This history is stored in the
.I .git
directory.
This suite of
.I git
tools provides a file interface to the
.I .git
directory mounted on
.I /mnt/git.
Modifications to the repository are done directly to the
.I .git
directory, and are reflected in the file system interface.
This allows for easy scripting, without excessive complexity
in the file API.

.SH COMMANDS

.PP
.B Git9/init
is used to create a new git repository, with no code or commits.
The repository is created in the current directory by default.
Passing a directory name will cause the repository to be created
there instead.
Passing the
.B -b
option will cause the repository to be initialized as a bare repository.
Passing the
.B -u
.I upstream
option will cause the upstream to be configured to
.I upstream.

.PP
.B Git9/clone
will take an existing repository, served over either the
.I git://
or
.I ssh://
protocols.
The first argument is the repository to clone.
The second argument, optionally, specifies the location to clone into.
If not specified, the repository will be cloned into the last path component
of the clone source, with the
.I .git
stripped off if present.

.B Git9/push
is used to push the current changes to a remote repository.
When no arguments are provided, the remote repository is taken from
the origin configured in
.I .git/config,
and only the changes on the current branch are pushed.
When passed the
.I -a
option, all branches are pushed.
When passed the
.I -u upstream
option, the changed are pushed to
.I upstream
instead of the configured origin.
When given the
.I -r
option, the branch is deleted from origin, instead of updated.

.B Git9/pull
behaves in a similar manner to git9/push, however it gets changes from
the upstream repository.
After fetching, it checks out the changes into the working directory.
When passed the
.I -f
option, the update of the working copy is suppressed.
When passed the
.I -u upstream
option, the changes are pulled from
.I upstream
instead of the configured origin.

.PP
Git9/fs serves the following directories:

.TP
/mnt/git/object
The objects in the repo.
.TP
/mnt/git/branch
The branches and tags in the repo.
.TP
/mnt/git/ctl
A file showing the status of the repo.
Currently, it only shows the current branch.
.TP
/mnt/git/HEAD
An alias for the currently checked out commit directory.

.PP
.B Git9/add
adds a file to the list of tracked files. When passed the
.I -r
flag, the file is removed from the list of tracked files.
The copy of the file in the repository is left untouched.

.PP
.B Git9/commit
creates a new commit which updates the files passed.

.PP
.B Git9/branch
is used to switch between branches.
When passed the
.I -c
option, the branch will be created if it does not yet exist.
When passed the
.I -o original
option, the branch created is based off of
.I original
instead of
.I HEAD.
When passed the
.I -s
option, the branch is created but the files are not checked out.

.PP
.B Git9/log
shows a history of the current branch.

.PP
.B Git9/diff
shows the differences between the currently checked out code and
the
.I HEAD
commit.
When passed the
.I -b base
option, the diff is computed against
.I base
instead of
.I HEAD.
When passed the
.I -s
option, only a the file statuses are
printed.

.PP
.B Git9/export
exports a list of commits in a format that
.B git9/import
can apply.

.PP
.B Git9/import
imports a commit with message, author, and
date information.

.PP
.B Git9/merge
takes two branches and merges them filewise using
.I ape/diff3.
The next commit made will be a merge commmit.

.PP
.B Git9/conf
is a tool for querying the git configuration.
The configuration key is provided as a dotted string. Spaces
are accepted. For example, to find the URL of the origin
repository, one might pass
.I 'remote "origin".url".
When given the
.I -r
option, the root of the current repository is printed.

.B Git9/query
takes an expression describing a commit, or set of commits,
and resolves it to a list of commits. With the
.I -p
option, instead of printing the commit hashes, the full
path to their
.B git9/fs
path is printed. With the
.I -c
option, the query must resolve to two commits. The blobs
that have changed in the commits are printed.

.PP
.B Git9/walk
provides a tool for walking the list of tracked objects and printing their status.
With no arguments, it prints a list of paths prefixed with the status character.
When given the
.I -c
character, only the paths are printed.
When given the
.I -q
option, all output is suppressed, and only the status is printed.
When given the
.I -f
option, the output is filtered by status code, and only matching items are printed.

.PP
The status characters are as follows:
.TP
T
Tracked, not modified since last commit.
.TP
M
Modified since last commit.
.TP
R
Removed from either working directory tracking list.
.TP
A
Added, does not yet exist in a commit.

.SH REF SYNTAX

.PP
Refs are specified with a simple query syntax.
A bare hash always evaluates to itself.
Ref names are resolved to their hashes.
The
.B a ^
suffix operator finds the parent of a commit.
The
.B a b @
suffix operator finds the common ancestor of the previous two commits.
The
.B a .. b
or
.B a : b
operator finds all commits between
.B a
and
.B b.
Between is defined as the set of all commits which are ancestors of
.B b
and descendants of
.B a.

.SH EXAMPLES

.PP
In order to create a new repository, run
.B git9/init:

.EX
git9/init myrepo
.EE

To clone an existing repository from a git server, run:
.EX
git9/clone git://github.com/Harvey-OS/harvey
cd harvey
# edit files
git9/commit foo.c
git9/push
.EE

.SH FILES
.TP .git
.TP .git/config
.TP $home/lib/git/config

.SH SOURCE
.B /sys/src/cmd/git

.SH SEE ALSO
.IR hg (1)
.IR replica (1)
.IR patch (1)
.IR gitfs (4)
.IR diff3

.SH BUGS
.PP
Repositories with submodules are effectively read-only.

.PP
There are a number of missing commands, features, and tools. Notable
missing features include
.I http
clones, history editing, and formatted patch management.

